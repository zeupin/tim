// ------------------------------------------------------------
// 生成grid
// ------------------------------------------------------------
// grid是带gutter的，col是不带gutter的

@mixin grid-make-grid(
  $gutter-list: $grid-gutter-list
) {
  position: relative;
  min-height: 1px;
  float: left;
  overflow: hidden;
  width: 100%;

  // ------------------------------
  // 设置gutter
  @each $gutter-name, $gutter-width in $gutter-list {
    @if $gutter-name == default {
        margin-left:  ($gutter-width / 2);
        margin-right: ($gutter-width / 2);
    } @else {
      .#{$gutter-name} & {
        margin-left:  ($gutter-width / 2);
        margin-right: ($gutter-width / 2);
      }
    }
  }

  // ------------------------------
  // 设置等高列
  //
  // 对row或者container设置一个match-height类，如下：
  // <div class="row match-height">
  //   <div class="col"></div>
  //   <div class="col"></div>
  //   <div class="col"></div>
  // </div>
  .match-height & {
    margin-bottom: -9999px;
    padding-bottom: 9999px;
  }
}


// ------------------------------------------------------------
// grid-make-width，生成各种情况下的grid的宽度
// ------------------------------------------------------------
// 生成：
// .gutter类型  .w-总列数-列数--屏幕类型,
// .gutter类型  .w-总列数-列数--屏幕类型,
// .gutter类型  .w-总列数-列数--屏幕类型 {
//   width: 50%;
// }
// .gutter类型  .w-总列数-列数--屏幕类型,
// .gutter类型  .w-总列数-列数--屏幕类型,
// .gutter类型  .w-总列数-列数--屏幕类型 {
//   width: 20%;
// }
//
// 备注：
// 1.为了减少css的文件大小，把相同的宽度用了点技巧做了合并处理。

@mixin grid-make-width(
  $screen,
  $columns-list: $grid-columns-list,
  $gutter-list: $grid-gutter-list
){
  // 列表型内部变量，用于保存所有的（宽度-选择器列表）组合
  // $map: (
  //   10%: 对应的选择器1, 对应的选择器2, ...
  //   50%: 对应的选择器3, 对应的选择器4, 对应的选择器5, ...
  //   ...: ...
  // );
  $map: ();

  // 生成screen后缀，如 --md，--lg 等。
  $screen-postfix: if($screen == default, "", "--#{$screen}");

  // 生成 $map 的数据
  @each $gutter-name, $gutter-width in $gutter-list {
    $gutter: if($gutter-name == default, "", ".#{$gutter-name}");
    @each $columns in $columns-list {
      @for $i from 1 through $columns {
        // 对应的选择器selector
        $selector: "#{$gutter} .w-#{$columns}-#{$i}#{$screen-postfix}";
        // 对应的宽度width
        $width: todo;
        @if ($i == $columns) {
          $width: 100%;
        } @else {
          $width: percentage($i / $columns) - $gutter-width;
        }

        // 把当前的 (width: selector) 追加到 $map 中
        $selector-list: "";
        @if (map-has-key($map, $width)) {
          $selector-list: map-get($map , $width);
          $selector-list: append($selector-list, $selector, comma);
        } @else {
          $selector-list: ($selector);
        }
        $map: map-merge($map, ($width: $selector-list));
      }
    }
  }

  // 把$map的数据取出来，生成最终的width表
  @each $width, $selector-list in $map {
    #{$selector-list} {
      width: $width;
    }
  }
}


// ------------------------------------------------------------
// grid-make-push，生成对应的push
// ------------------------------------------------------------
//
// @param $screen 一般为default，md, lg, xl
// @param $columns-list 默认为 $grid-columns-list，要生成的列数列表
//
// 生成：
//
// 如果 $screen == default
// push
// push-2-1 {left:}
// push-3-1 {left:} push-3-2 {}
// push-4-1 {left:} push-4-2 {} push-4-3 {}
//
// 如果 $screen == md
// push--md
// push-2-1--md {left:}
// push-3-1--md {left:} push-3-2--md {}
// push-4-1--md {left:} push-4-2--md {} push-4-3--md {}
//
// 注意：最多只到 push-4-3, 没有 push-4-4 这种

@mixin grid-make-push(
  $screen,
  $columns-list: $grid-columns-list
){
  $key: "--#{$screen}";
  @if $screen == default {
    $key: "";
  }
  @each $columns in $columns-list {
    @for $i from 1 to $columns {
      $selector: ".push-#{$columns}-#{$i}#{$key}";
      #{$selector} {
        left: percentage($i / $columns);
      }
    }
  }
}


// ------------------------------------------------------------
// grid-make-pull，生成对应的pull
// ------------------------------------------------------------
//
// @param $screen 一般为default，md, lg, xl
// @param $columns-list 默认为 $grid-columns-list，要生成的列数列表
//
// 生成：
//
// 如果 $screen == default
// pull
// pull-2-1 {right:}
// pull-3-1 {right:} pull-3-2 {}
// pull-4-1 {right:} pull-4-2 {} pull-4-3 {}
//
// 如果 $screen == md
// pull--md
// pull-2-1--md {right:}
// pull-3-1--md {right:} pull-3-2--md {}
// pull-4-1--md {right:} pull-4-2--md {} pull-4-3--md {}
//
// 注意：最多只到 pull-4-3, 没有 pull-4-4 这种

@mixin grid-make-pull(
  $screen,
  $columns-list: $grid-columns-list
){
  $key: "--#{$screen}";
  @if $screen == default {
    $key: "";
  }
  @each $columns in $columns-list {
    @for $i from 1 to $columns {
      $selector: ".pull-#{$columns}-#{$i}#{$key}";
      #{$selector} {
        right: percentage($i / $columns);
      }
    }
  }
}


// ------------------------------------------------------------
// grid-make-offset，生成对应的offset
// ------------------------------------------------------------
//
// @param $screen 一般为default，md, lg, xl
// @param $columns-list 默认为 $grid-columns-list，要生成的列数列表
//
// 生成：
//
// 如果 $screen == default
// offset
// offset-2-1 {margin-left:}
// offset-3-1 {margin-left:} offset-3-2 {}
// offset-4-1 {margin-left:} offset-4-2 {} offset-4-3 {}
//
// 如果 $screen == md
// offset--md
// offset-2-1--md {margin-left:}
// offset-3-1--md {margin-left:} offset-3-2--md {}
// offset-4-1--md {margin-left:} offset-4-2--md {} offset-4-3--md {}
//
// 注意：最多只到 offset-4-3, 没有 offset-4-4 这种

@mixin grid-make-offset(
  $screen,
  $columns-list: $grid-columns-list
){
  $key: "--#{$screen}";
  @if $screen == default {
    $key: "";
  }
  @each $columns in $columns-list {
    @for $i from 1 to $columns {
      $selector: ".offset-#{$columns}-#{$i}#{$key}";
      #{$selector} {
        margin-left: percentage($i / $columns);
      }
    }
  }
}
